/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include "platform/android/jni/JniHelper.h"
#include <android/log.h>
#include "cocos2d.h"
#include <string>
#include <stdio.h>
#include "UmengSocial/CCUMTypeDef.h"
#include "CCUMSocialController.h"

using namespace std;

// 授权回调
AuthEventHandler authCallback = NULL;
// 分享回调
ShareEventHandler shareCallback = NULL;

/*
 * Class:     com_umeng_social_CCUMSocialController
 * Method:    OnAuthorizeStart
 * Function : 授权开始的回调函数, platform参数为要授权的平台
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_com_umeng_social_CCUMSocialController_OnAuthorizeStart
(JNIEnv *env, jclass clz, jint platform)
{
    if ( NULL != authCallback ) 
    {
        authCallback(platform, 200);
    }

}


/*
 * Class:     com_umeng_social_CCUMSocialController
 * Method:    OnAuthorizeComplete
 * Function : 授权结束的回调函数, platform为要授权的平台, stCode为返回码,其中200为授权成功, 0代表发生错误, -1代表取消.
                jobjectArray为授权成功时返回的数据,长度为2, 第一个数据为token, 第二个数据为过期时间。
                如果授权失败则返回的长度为1,包含了错误信息.
                而删除授权也是使用这个回调, 返回的字符串会为"deleteOauth", 开发者可以判断字符串来确定回调的结果.
 * Signature: ([Ljava/lang/String;I)V
 */
JNIEXPORT void JNICALL Java_com_umeng_social_CCUMSocialController_OnAuthorizeComplete
(JNIEnv *env, jclass clz, jint platform, jint stCode, jobjectArray data)
{
    if ( authCallback != NULL ) {
        // const char *str = env->GetStringUTFChars(platform, 0);
        authCallback(platform, stCode);
        // env->ReleaseStringUTFChars(platform, str);
    }

}

/*
 * Class:     com_umeng_social_CCUMSocialController
 * Method:    OnShareStart
 * Function : 开始分享的回调函数
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_umeng_social_CCUMSocialController_OnShareStart
(JNIEnv *env, jclass clz)
{
    if ( shareCallback != NULL ) {
        // const char *str = env->GetStringUTFChars(platform, 0);
        // 参数1代表平台, 参数2代表状态, 比如start, cancel, complete, 参数3代表状态码, 200为成功.
        shareCallback(-1, 200);
        // env->ReleaseStringUTFChars(platform, str);
    }
}

/*
 * Class:     com_umeng_social_CCUMSocialController
 * Method:    OnShareComplete
 * Function : 分享完成的的回调函数, platform为分享的平台; stCode为返回码, 200为分享成功.
 * Signature: (IILjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_com_umeng_social_CCUMSocialController_OnShareComplete
(JNIEnv *env, jclass clz, jint platform, jint stCode, jstring descriptor)
{
        if ( shareCallback != NULL ) {
            shareCallback(platform, stCode);
        }
}

// /*
//  * 获取cocos2d-x游戏截屏, 并且返回图片的保存路径
//  * Class:     com_umeng_social_CCUMSocialController
//  * Method:    getCocos2dxScrShot
//  * Signature: ()Ljava/lang/String;
//  */
// JNIEXPORT jstring JNICALL Java_com_umeng_social_CCUMSocialController_getCocos2dxScrShot
// (JNIEnv *env, jclass clz)
// {
    
// }

// /*
//  * 用户摇一摇结束,开发者可以在此函数中执行暂停游戏等操作
//  * Class:     com_umeng_social_CCUMSocialController
//  * Method:    onShakeComplete
//  * Signature: ()V
//  */
// JNIEXPORT void JNICALL Java_com_umeng_social_CCUMSocialController_onShakeComplete
// (JNIEnv *env, jclass clz)
// {
    
// }


/*
 * 设置友盟app key
 * @param appKey 友盟app key
 */
void setUmengAppkey(const char* appkey)
{
    JniMethodInfo mi;
    bool isHave = getMethod(mi, "setUmengAppkey", "(Ljava/lang/String;)V");
    if ( isHave )
    {
        jstring umkey = mi.env->NewStringUTF(appkey);
        mi.env->CallStaticVoidMethod(mi.classID, mi.methodID, umkey);
        mi.env->DeleteLocalRef(umkey);
        releaseMethod(mi);
    }

}


/*
 * 对某平台进行授权
 * @param platfrom 要授权的平台, 参考CCUMTypeDef.h中的Platform枚举定义
 * @param  callback 授权回调, 具体参考CCUMTypeDef.h中的定义
 */
void doAuthorize(int platform, AuthEventHandler callback)
{
    authCallback = callback;
    if ( authCallback != NULL ) 
    {
        CCLog("#### 授权回调不为NULL");

    }
    JniMethodInfo mi;
    bool isHave = getMethod(mi, "doAuthorize", "(I)V");
    if ( isHave )
    {
        mi.env->CallStaticVoidMethod(mi.classID, mi.methodID, platform);
        releaseMethod(mi);
    }
}

/*
 * 删除某平台的授权信息
 * @param   callback 删除授权的回调, 具体参考CCUMTypeDef.h中的定义
 */
void deletePlatformAuthorization(int platform, AuthEventHandler callback)
{
    authCallback = callback;
    JniMethodInfo mi;
    bool isHave = getMethod(mi, "deleteAuthorization", "(I)V");
    if ( isHave )
    {
        mi.env->CallStaticVoidMethod(mi.classID, mi.methodID, platform);
        releaseMethod(mi);
    }
}

/*
 * 判断某平台是否已经授权
 * @param platform 要判定的平台, 参考CCUMTypeDef.h中的Platform枚举定义
 */
bool isPlatformAuthorized(int platform)
{
    JniMethodInfo mi;
    bool isHave = getMethod(mi, "isAuthorized", "(I)Z");
    if ( isHave )
    {
        mi.env->CallStaticVoidMethod(mi.classID, mi.methodID, platform);
        releaseMethod(mi);
    }
}

/*
 * 打开分享面板
 * @param callback 分享回调,具体参考CCUMTypeDef.h中的定义
 */
void doOpenShare(ShareEventHandler callback)
{
    shareCallback = callback;
    if ( shareCallback != NULL ) 
    {
        CCLog("#### 分享回调不为NULL");

    }
    JniMethodInfo mi;
    bool isHave = getMethod(mi, "openShare", "()V");
    if ( isHave )
    {
        mi.env->CallStaticVoidMethod(mi.classID, mi.methodID);
        releaseMethod(mi);
    }
}

/*
 * 直接分享到某个平台，不打开分享面板和内容编辑页面
 * @param platform 要分享到的目标平台， 参考CCUMTypeDef.h中的Platform枚举定义
 * @param callback 分享回调，具体参考CCUMTypeDef.h中的定义
 */
void doDirectShare(int platform, ShareEventHandler callback)
{
    shareCallback = callback;
    if ( shareCallback != NULL ) 
    {
        CCLog("#### 授权回调不为NULL");

    }
    JniMethodInfo mi;
    bool isHave = getMethod(mi, "directShare", "(I)V");
    if ( isHave )
    {
        mi.env->CallStaticVoidMethod(mi.classID, mi.methodID, platform);
        releaseMethod(mi);
    }
    
}


/*
 * 设置要分享的文字内容
 * @param text 要分享的文字内容
 */
void setShareTextContent(const char* text)
{
    JniMethodInfo mi;
	bool isHave = getMethod(mi, "setShareContent", "(Ljava/lang/String;)V");
    if ( isHave )
    {
        jstring content = mi.env->NewStringUTF(text);
        mi.env->CallStaticVoidMethod(mi.classID, mi.methodID, content);
        mi.env->DeleteLocalRef(content);
        releaseMethod(mi);
    }
    CCLog("#### setShareTextContent");
}


/*
 * 设置要分享的图片的本地路径或者url
 * @param pathOrUrl 图片的本地路径或者url, 如果是url必须则必须以http://或者https://开头
 */
void setShareImageName(const char* path)
{

    JniMethodInfo mi;
	bool isHave = getMethod(mi, "setShareImageName", "(Ljava/lang/String;)V");
    if ( isHave )
    {
        jstring imgPath = mi.env->NewStringUTF(path);
        mi.env->CallStaticVoidMethod(mi.classID, mi.methodID, imgPath);
        mi.env->DeleteLocalRef(imgPath);
        releaseMethod(mi);
    }
    CCLog("#### setShareImageName");
}

/*
 * 设置SDK支持的平台
 * @param platforms SDK支持的平台， 参考CCUMTypeDef.h中的Platform枚举定义
 */
void setSocialPlatforms(vector<int>* platforms)
{
    if ( platforms == NULL ) {
        return ;
    }
   JniMethodInfo mi;
   bool isHave = getMethod(mi, "setPlatforms", "([I)V");

   int* platformArr = platforms->data() ;
   int length = platforms->size() ;

    // 创建数组对象,且不能在函数末尾删除引用
    jintArray iArr = mi.env->NewIntArray(length);
    // 将nums数组中的内容设置到jintArray对象中,
    mi.env->SetIntArrayRegion(iArr, 0, length, platformArr);
   if ( isHave )
   {
       mi.env->CallStaticVoidMethod(mi.classID, mi.methodID, iArr);
       releaseMethod(mi);
   }
}


/*
 * 获取某个方法的对象
 * @param mi 方法对象， 传递的是引用
 * @param methodName 方法名
 * @param sig       方法签名
 */
bool getMethod(JniMethodInfo &mi, const char *methodName, const char *signature) {
	return JniHelper::getStaticMethodInfo(mi, "com/umeng/social/CCUMSocialController", methodName, signature);
}


/*
 * 释放方法对象
 * @param mi 要释放的方法对象
 */
void releaseMethod(JniMethodInfo &mi) {
	mi.env->DeleteLocalRef(mi.classID);
}



// // char转jstring
// jstring charToJstring(JNIEnv* env, const char* text)
// {

//     jsize   len   =   strlen(text);
//     jclass   clsstring   =   env->FindClass("java/lang/String");
//     jstring   strencode   =   env->NewStringUTF("GB2312");

//     jmethodID   mid  =  env->GetMethodID(clsstring,  "<init>",   "([BLjava/lang/String;)V");
//     jbyteArray   barr  =  env-> NewByteArray(len);

//     env-> SetByteArrayRegion(barr,0,len,(jbyte*)text);
//     return (jstring)env-> NewObject(clsstring,mid,barr,strencode);
// }

// /*
//  * 添加平台支持
//  *
//  */
// void doSupportPlatform(int platform, const char* appkey, const char* targetUrl)
// {
//     JniMethodInfo mi;
//     bool isHave = getMethod(mi, "supportPlatform", "(ILjava/lang/String;Ljava/lang/String;)V");
//     if ( isHave )
//     {
//         // jstring target = mi.env->NewStringUTF(platform);
//         jstring appid = mi.env->NewStringUTF(appkey);
//         jstring url = mi.env->NewStringUTF(targetUrl);
//         mi.env->CallStaticVoidMethod(mi.classID, mi.methodID, platform, appid, url);
//         // mi.env->DeleteLocalRef(target);
//         mi.env->DeleteLocalRef(appid);
//         mi.env->DeleteLocalRef(url);
//         releaseMethod(mi);
//     }
// }


