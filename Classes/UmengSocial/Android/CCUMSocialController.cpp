/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include "platform/android/jni/JniHelper.h"
#include <android/log.h>
#include "cocos2d.h"
#include <string>
#include <stdio.h>
#include "CCUMSocialController.h"

using namespace std;
/*
 * 授权开始的回调函数
 * Class:     com_umeng_social_CCUMSocialController
 * Method:    OnAuthorizeStart
 * Signature: (Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_com_umeng_social_CCUMSocialController_OnAuthorizeStart
(JNIEnv *env, jclass clz, jstring platform)
{
    
}

/*
 * 授权错误的回调函数
 * Class:     com_umeng_social_CCUMSocialController
 * Method:    OnAuthorizeError
 * Signature: (Ljava/lang/String;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_com_umeng_social_CCUMSocialController_OnAuthorizeError
(JNIEnv *env, jclass clz, jstring errorMsg, jstring platform)
{
    
    
}

/*
 * 授权取消的回调函数
 * Class:     com_umeng_social_CCUMSocialController
 * Method:    OnAuthorizeCancel
 * Signature: (Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_com_umeng_social_CCUMSocialController_OnAuthorizeCancel
(JNIEnv *env, jclass clz, jstring platform)
{
    
}

/*
 * 授权完成的回调函数
 * Class:     com_umeng_social_CCUMSocialController
 * Method:    OnAuthorizeComplete
 * Signature: ([Ljava/lang/String;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_com_umeng_social_CCUMSocialController_OnAuthorizeComplete
(JNIEnv *env, jclass clz, jobjectArray data, jstring platform)
{
    
}

/*
 * 分享开始的回调函数
 * Class:     com_umeng_social_CCUMSocialController
 * Method:    OnShareStart
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_umeng_social_CCUMSocialController_OnShareStart
(JNIEnv *env, jclass clz)
{
    
}

/*
 * 分享完成的回调函数
 * Class:     com_umeng_social_CCUMSocialController
 * Method:    OnShareComplete
 * Signature: (Ljava/lang/String;ILjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_com_umeng_social_CCUMSocialController_OnShareComplete
(JNIEnv *env, jclass clz, jstring platform, jint stCode, jstring descriptor)
{
    
}

/*
 * 获取cocos2d-x游戏截屏, 并且返回图片的保存路径
 * Class:     com_umeng_social_CCUMSocialController
 * Method:    getCocos2dxScrShot
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_umeng_social_CCUMSocialController_getCocos2dxScrShot
(JNIEnv *env, jclass clz)
{
    
}

/*
 * 用户摇一摇结束,开发者可以在此函数中执行暂停游戏等操作
 * Class:     com_umeng_social_CCUMSocialController
 * Method:    onShakeComplete
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_umeng_social_CCUMSocialController_onShakeComplete
(JNIEnv *env, jclass clz)
{
    
}

/*
 * 设置要分享的文字内容
 *
 */
void setShareContent(const char* text)
{
    JniMethodInfo mi;
	bool isHave = getMethod(mi, "setShareContent", "(Ljava/lang/String;)V");
    if ( isHave )
    {
        jstring content = mi.env->NewStringUTF(text);
        mi.env->CallStaticVoidMethod(mi.classID, mi.methodID, content);
        mi.env->DeleteLocalRef(content);
        releaseMethod(mi);
    }
}


/*
 *设置要分享的图片的本地路径
 *
 */
void setShareImagePath(const char* path)
{
    JniMethodInfo mi;
	bool isHave = getMethod(mi, "setShareImagePath", "(Ljava/lang/String;)V");
    if ( isHave )
    {
        jstring imgPath = mi.env->NewStringUTF(path);
        mi.env->CallStaticVoidMethod(mi.classID, mi.methodID, imgPath);
        mi.env->DeleteLocalRef(imgPath);
        releaseMethod(mi);
    }
}

/*
 * 设置要分享的图片的url
 *
 */
void setShareImageUrl(const char* url)
{
    JniMethodInfo mi;
	bool isHave = getMethod(mi, "setShareImageUrl", "(Ljava/lang/String;)V");
    if ( isHave )
    {
        jstring imgUrl = mi.env->NewStringUTF(url);
        mi.env->CallStaticVoidMethod(mi.classID, mi.methodID, imgUrl);
        mi.env->DeleteLocalRef(imgUrl);
        releaseMethod(mi);
    }
}

/*
 * 对某平台进行授权
 *
 */
void doAuthorize(const char* platform)
{
    JniMethodInfo mi;
	bool isHave = getMethod(mi, "directShare", "(Ljava/lang/String;)V");
    if ( isHave )
    {
        jstring target = mi.env->NewStringUTF(platform);
        mi.env->CallStaticVoidMethod(mi.classID, mi.methodID, target);
        mi.env->DeleteLocalRef(target);
        releaseMethod(mi);
    }
}

/*
 * 删除某平台的授权信息
 *
 */
void deleteAuthorization(const char* platform)
{
    JniMethodInfo mi;
	bool isHave = getMethod(mi, "deleteAuthorization", "(Ljava/lang/String;)V");
    if ( isHave )
    {
        jstring target = mi.env->NewStringUTF(platform);
        mi.env->CallStaticVoidMethod(mi.classID, mi.methodID, target);
        mi.env->DeleteLocalRef(target);
        releaseMethod(mi);
    }
}

/*
 * 判断某平台是否已经授权
 *
 */
bool isAuthorized(const char* platform)
{
    JniMethodInfo mi;
	bool isHave = getMethod(mi, "isAuthorized", "(Ljava/lang/String;)V");
    if ( isHave )
    {
        jstring target = mi.env->NewStringUTF(platform);
        mi.env->CallStaticVoidMethod(mi.classID, mi.methodID, target);
        mi.env->DeleteLocalRef(target);
        releaseMethod(mi);
    }
}

/*
 * 打开分享面板
 *
 */
void openShare(bool registerListener)
{
    JniMethodInfo mi;
    CCLog("#### 调用openShare   1111");
	bool isHave = getMethod(mi, "openShare", "(Z)V");
    if ( isHave )
    {
        CCLog("#### 调用openShare    2222");
        mi.env->CallStaticVoidMethod(mi.classID, mi.methodID, registerListener);
        releaseMethod(mi);
    }
}

/*
 * 底层分享
 *
 */
void directShare(const char* platform)
{
    JniMethodInfo mi;
	bool isHave = getMethod(mi, "directShare", "(Ljava/lang/String;)V");
    if ( isHave )
    {
        jstring target = mi.env->NewStringUTF(platform);
        mi.env->CallStaticVoidMethod(mi.classID, mi.methodID, target);
        mi.env->DeleteLocalRef(target);
        releaseMethod(mi);
    }
    
}


/*
 * 添加平台支持
 *
 */
void supportPlatform(const char* platform, const char* appkey, const char* targetUrl)
{
    JniMethodInfo mi;
	bool isHave = getMethod(mi, "supportPlatform", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");
    if ( isHave )
    {
        jstring target = mi.env->NewStringUTF(platform);
        jstring appid = mi.env->NewStringUTF(appkey);
        jstring url = mi.env->NewStringUTF(targetUrl);
        mi.env->CallStaticVoidMethod(mi.classID, mi.methodID, target, appid, url);
        mi.env->DeleteLocalRef(target);
        mi.env->DeleteLocalRef(appid);
        mi.env->DeleteLocalRef(url);
        releaseMethod(mi);
    }
}

/*
 * 设置平台顺序呢
 *
 */
void setPlatformsOrder(string platformOrders[])
{
    
//    JniMethodInfo mi;
//	bool isHave = getMethod(mi, "setPlatformsOrder", "([Ljava/lang/String;)V");
//    if ( platformOrders != NULL )
//    {
//        int size = platformOrders.length();
//        for (int i=0; i<size; i++)
//        {
//            
//        }
//    }
//    if ( isHave )
//    {
//        mi.env->CallStaticVoidMethod(mi.classID, mi.methodID);
//        releaseMethod(mi);
//    }
}
/*
 * 移除某些平台
 *
 */
void removePlatforms(string platforms[])
{
//    JniMethodInfo mi;
//	bool isHave = getMethod(mi, "removePlatfroms", "([Ljava/lang/String;)V");
//    if ( isHave )
//    {
//        mi.env->CallStaticVoidMethod(mi.classID, mi.methodID);
//        releaseMethod(mi);
//    }
}

/*
 * 清空sdk
 */
void cleanup()
{
    JniMethodInfo mi;
	bool isHave = getMethod(mi, "cleanup", "()V");
    if ( isHave )
    {
        mi.env->CallStaticVoidMethod(mi.classID, mi.methodID);
        releaseMethod(mi);
    }
}

/*
 *
 */
bool getMethod(JniMethodInfo &mi, const char *methodName, const char *signature) {
	return JniHelper::getStaticMethodInfo(mi, "com/umeng/social/CCUMSocialController", methodName, signature);
}
/*
 * 释放方法
 */
void releaseMethod(JniMethodInfo &mi) {
	mi.env->DeleteLocalRef(mi.classID);
}

